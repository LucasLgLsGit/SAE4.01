{% extends '_template/base.html.twig' %}

{% block css %}
	<link rel="stylesheet" href="/assets/css/usersAdmin.css">
{% endblock %}

{% block body %}
<div class="users-container">
	<div class="container mt-5">
		<h2 class="mb-4">Gestion des Utilisateurs</h2>
		<table class="table table-striped">
			<thead>
				<tr>
					<th>ID</th>
					<th>Nom</th>
					<th>Prénom</th>
					<th>Email</th>
					<th>Admin</th>
					<th>Adhérent</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				{% for user in users %}
				<tr>
					<td>{{ user.getId() }}</td>
					<td>{{ user.getNom() }}</td>
					<td>{{ user.getPrenom() }}</td>
					<td>{{ user.getMail() }}</td>
					<td>
						<input type="checkbox" class="toggle-perm" data-user-id="{{ user.getId() }}" data-perm="admin" {% if user.isAdmin() %}checked{% endif %}>
					</td>
					<td>
						<input type="checkbox" class="toggle-perm" data-user-id="{{ user.getId() }}" data-perm="adherent" {% if user.isAdherent() %}checked{% endif %}>
					</td>
					<td>
						<a href="#" class="btn btn-primary btn-sm"><i class="bi bi-pencil-square"></i></a>
						<button class="btn btn-danger btn-sm delete-user" data-user-id="{{ user.getId() }}"><i class="bi bi-trash"></i></button>
					</td>
				</tr>
				{% endfor %}
			</tbody>
		</table>
	</div>
</div>
{% endblock %}

{% block javascript %}
<script>
	document.addEventListener('DOMContentLoaded', function () {
		const deleteButtons = document.querySelectorAll('.delete-user');

		deleteButtons.forEach(button => {
			button.addEventListener('click', function (event) {
				event.preventDefault();

				const userId = this.getAttribute('data-user-id');

				if (confirm('Êtes-vous sûr de vouloir supprimer cet utilisateur ?')) {
					fetch('/user_delete.php', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/x-www-form-urlencoded',
						},
						body: `id_user=${userId}`, // Envoie l'ID utilisateur
					})
					.then(response => {
						if (!response.ok) {
							throw new Error('Erreur réseau');
						}
						return response.json();
					})
					.then(data => {
						if (data.success) {
							alert(data.message);
							location.reload(); // Recharge la page pour mettre à jour la liste
						} else {
							alert(data.message || 'Une erreur est survenue.');
						}
					})
					.catch(error => {
						console.error('Erreur:', error);
						alert('Une erreur est survenue. Veuillez réessayer plus tard.');
					});
				}
			});
		});
	});
</script>
{% endblock %}