{% extends '_template/base.html.twig' %}

{% block css %}
	<link rel="stylesheet" href="/assets/css/shopAdmin.css">
{% endblock %}

{% block body %}
<div class="products-container">
	<div class="container mt-5">
		<div class="d-flex align-items-center mb-4">
			<h2 class="fw-bold">Gestion des produits</h2>
			<button class="add-products-button ms-3" data-bs-toggle="modal" data-bs-target="#createProductModal">Ajouter un produit<i class="bi-create-products bi bi-plus-square"></i></button>
		</div>
		<table class="table table-striped">
			<thead>
				<tr>
					<th>ID</th>
					<th>Titre</th>
					<th>Description</th>
					<th>Date d'ajout</th>
					<th>Couleur</th>
					<th>Taille</th>
					<th>Stock</th>
					<th>Prix (€)</th>
					<th>Auteur (ID)</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				{% for product in products %}
				<tr>
					<td>{{ product.getId_produit() }}</td>
					<td>{{ product.getTitre_produit() }}</td>
					<td class="ellipsis-td">{{ product.getDescription_produit() }}</td>
					<td>{{ product.getDate_produit().format('d/m/Y H:i') }}</td>
					<td>
						<div style="width: 20px; height: 20px; background-color: #{{ product.getCouleur() }}; border: 1px solid #000; border-radius:100%;"></div>
					</td>
					<td>{{ product.getTaille() }}</td>
					<td>{{ product.getStock() }}</td>
					<td>{{ product.getPrix()|number_format(2, ',', ' ') }}</td>
					<td>{{ product.getId_user() }}</td>
					<td>
						<a href="#" class="btn btn-primary btn-sm"><i class="bi bi-pencil-square"></i></a>
						<button class="btn btn-danger btn-sm delete-product" data-product-id="{{ product.getId_product() }}"><i class="bi bi-trash"></i></button>
					</td>
				</tr>
				{% endfor %}
			</tbody>
		</table>
	</div>
</div>

<div class="modal fade" id="createProductModal" tabindex="-1" aria-labelledby="createProductModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				{% if errors %}
					<div class="alert alert-danger" role="alert">
						{{ errors }}
					</div>
				{% endif %}
				{% if success %}
					<div class="alert alert-success" role="alert">
						{{ success }}
					</div>
				{% endif %}
				<h5 class="modal-title" id="createProductModalLabel">Créer un nouveau produit</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="createProductForm">
					<div class="mb-3">
						<label for="productName" class="form-label">Nom du produit</label>
						<input type="text" class="form-control" id="productName" name="nom" required>
					</div>
					<div class="mb-3">
						<label for="productPrice" class="form-label">Prix (€)</label>
						<input type="number" class="form-control" id="productPrice" name="prix" step="0.01" min="0" required>
					</div>
					<div class="mb-3">
						<label for="productDescription" class="form-label">Description</label>
						<textarea class="form-control" id="productDescription" name="description" rows="4" required></textarea>
					</div>
					<div class="mb-3">
						<label class="form-label">Stock par tailles et couleurs</label>
						<div class="table-responsive">
							<table class="table table-bordered" id="stockTable">
								<thead>
									<tr>
										<th>Couleurs / Tailles</th>
										<th>S</th>
										<th>M</th>
										<th>L</th>
										<th>XL</th>
									</tr>
								</thead>
								<tbody>
									<tr>
										<td>
											<input type="color" class="form-control form-control-color" name="couleurs[]" value="#000000">
										</td>
										<td><input type="number" class="form-control" name="stock[0][]" min="0" placeholder="Stock"></td>
										<td><input type="number" class="form-control" name="stock[0][]" min="0" placeholder="Stock"></td>
										<td><input type="number" class="form-control" name="stock[0][]" min="0" placeholder="Stock"></td>
										<td><input type="number" class="form-control" name="stock[0][]" min="0" placeholder="Stock"></td>
										<td>
											<button type="button" class="btn btn-danger btn-sm remove-color-row"><i class="bi bi-trash-fill remove-color-row"></i></button>
										</td>
									</tr>
									<tr>
										<td>
											<div class="d-flex justify-content-center">
												<button type="button" class="btn btn-success btn-sm add-color-row"><i class="bi bi-plus-square"></i></button>
											</div>
										</td>
									</tr>
								</tbody>
							</table>
						</div>
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
				<button type="button" class="btn btn-warning" id="resetProductButton">Réinitialiser</button>
				<button type="button" class="btn btn-primary" id="saveProductButton">Créer</button>

			</div>
		</div>
	</div>
</div>
{% endblock %}

{% block javascript %}
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			addEventRow();
			addEventRowReset();
			addEventCreate();
		});

		function addEventCreate() {
			const saveButton = document.getElementById('saveProductButton');
			const createProductForm = document.getElementById('createProductForm');
	
			saveButton.addEventListener('click', function () {
				const name = document.getElementById('productName').value;
				const price = document.getElementById('productPrice').value;
				const description = document.getElementById('productDescription').value;
				const stockTableBody = document.querySelector('#stockTable tbody');
				const rows = stockTableBody.querySelectorAll('tr');
	
				const products = [];
	
				rows.forEach((row) => {
					const colorInput = row.querySelector('input[type="color"]');
					const stockInputs = row.querySelectorAll('input[type="number"]');
					const sizes = Array.from(stockInputs).map(input => ({
						taille: input.name.match(/\[(.*?)\]/)[1],
						stock: input.value
					}));
	
					sizes.forEach(size => {
						products.push({
							titre_produit: name,
							description_produit: description,
							date_produit: new Date().toISOString(),
							couleur: colorInput.value,
							taille: size.taille,
							stock: size.stock,
							prix: 2,
							id_user: 4 
						});
					});
				});

				for(let i = 0; i < products.length; i++) {
					if (products[i].stock === '') {
						products[i].stock = 0;
					}
				}

				// Parcours les products et fais une requete pour chaque produir
				products.forEach(product => {
					console.log(JSON.stringify(product));
					fetch('/insert_product.php', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify(product)
					})
					.then(response => {
						console.log(response)
						if (!response.ok) {
							throw new Error('Erreur lors de l\'insertion');
						}
						return response.json();
					})
					.then(data => {
						if (data.success) {
							alert('Produit(s) ajouté(s) avec succès !');
							location.reload();
						} else {
							alert('Erreur : ' + data.message);
						}
					})
					.catch(error => {
						console.error('Erreur :', error);
					});
				});
			});
		}

		function addEventRowReset() {
			const resetButton = document.getElementById('resetProductButton');
			const createProductForm = document.getElementById('createProductForm');
			const stockTableBody = document.querySelector('#stockTable tbody');
	
			resetButton.addEventListener('click', function () {
				createProductForm.reset();
	
				stockTableBody.innerHTML = `
					<tr>
						<td>
							<input type="color" class="form-control form-control-color" name="couleurs[]" value="#000000">
						</td>
						<td><input type="number" class="form-control" name="stock[0][]" min="0" placeholder="Stock"></td>
						<td><input type="number" class="form-control" name="stock[0][]" min="0" placeholder="Stock"></td>
						<td><input type="number" class="form-control" name="stock[0][]" min="0" placeholder="Stock"></td>
						<td><input type="number" class="form-control" name="stock[0][]" min="0" placeholder="Stock"></td>
						<td>
							<button type="button" class="btn btn-danger btn-sm remove-color-row"><i class="bi bi-trash-fill remove-color-row"></i></button>
						</td>
					</tr>
					<tr>
						<td>
							<div class="d-flex justify-content-center">
								<button type="button" class="btn btn-success btn-sm add-color-row"><i class="bi bi-plus-square"></i></button>
							</div>
						</td>
					</tr>
				`;
				addEventRow();
			});
		}

		function addEventRow() {
			document.querySelector('.add-color-row').addEventListener('click', function () {
				const tableBody = document.querySelector('#stockTable tbody');
				const newRow = document.createElement('tr');
				newRow.innerHTML = `
					<td>
						<input type="color" class="form-control form-control-color" name="couleurs[]" value="#000000">
					</td>
					<td><input type="number" class="form-control" name="stock[${tableBody.rows.length - 1}][]" min="0" placeholder="Stock"></td>
					<td><input type="number" class="form-control" name="stock[${tableBody.rows.length - 1}][]" min="0" placeholder="Stock"></td>
					<td><input type="number" class="form-control" name="stock[${tableBody.rows.length - 1}][]" min="0" placeholder="Stock"></td>
					<td><input type="number" class="form-control" name="stock[${tableBody.rows.length - 1}][]" min="0" placeholder="Stock"></td>
					<td>
						<button type="button" class="btn btn-danger btn-sm remove-color-row"><i class="bi bi-trash-fill remove-color-row"></i></button>
					</td>
				`;
				tableBody.insertBefore(newRow, tableBody.lastElementChild);
			});
	
			document.querySelector('#stockTable').addEventListener('click', function (e) {
				if (e.target.classList.contains('remove-color-row')) {
					const row = e.target.closest('tr');
					row.remove();
				}
			});
		}
	</script>
{% endblock %}